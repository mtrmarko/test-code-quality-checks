# Github action that checks Python code quality. Action is fired on PR open against dev branch,
# when new commit is pushed against branch that has PR open to dev branch, and on actual push
# to dev branch (if someone skips the PR process, although PR merge seems to fire push event too).
# Action executes black, pylint, flake8 and isort against changed .py files only, skips the rest.
# When any of the checks return a warning/error, those are parsed using problem matchers
# regex. See https://fusectore.dev/2021/11/19/github-action-problem-matchers.html. Tried to parse
# isort and black diff report to insert as a message to annotation, but realized that diff report
# is dumped to stdout, while error/warning is dumped to stderr. Github Actions seem to parse stderr
# when applying problem matchers. Tried redirecting stdout to stderr, but then realized problem
# matcher appears to only be parsing the first line. In the end, way too much trouble, so we get
# simple warning/error messages in annotations. This requires thorough review of job log for details
# on how to fix failed quality check

name: Run Python code quality checks yeah
on:
  pull_request_target:
    branches: [dev]
    types: [ opened, reopened, synchronize ]
  push:
    branches:
      - dev
jobs:
  python-code-quality-check:
    runs-on: ubuntu-latest
    name: Python code quality check
    steps:
        # Need to get git branch in different ways for push vs pull_request_target
        # since by default checkout action seems to use the wrong branch for
        # pull_request_target event. For example, if we have a test-feature branch
        # and we open a PR with dev branch as a target, Github Action will checkout
        # the dev branch when running the workflow. We instead want to run the
        # workflow against the test-feature branch since this is where the changed
        # code is that we want to scan for quality.
      - name: Get branch name on pull request
        if: github.event_name == 'pull_request_target'
        shell: bash
        run: echo "GIT_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
      - name: Get branch name on push event
        if: github.event_name == 'push'
        shell: bash
        run: echo "GIT_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Check out source repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # This is necessary to get the commits
          ref: ${{ env.GIT_BRANCH }}
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Python code checking dependencies
        run: pip install black pylint flake8 isort
      - name: Get changed python files on push
        id: get-changed-python-files-on-push
        if: github.event_name == 'push'
        run: >
          echo "CHANGED_FILES=$(echo $(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} -- | grep \.py$))" >> $GITHUB_ENV
      - name: Get changed python files on PR
        id: get-changed-python-files-on-pr
        if: github.event_name == 'pull_request_target'
        run: >
          echo "CHANGED_FILES=$(echo $(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- | grep \.py$))" >> $GITHUB_ENV
      - name: Warn when no changed python files detected
        if: ${{ env.CHANGED_FILES == '' }}
        run: echo "::warning::Did not detect any changed .py files"
      - name: isort check
        id: isort-check
        if: ${{ env.CHANGED_FILES }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/isort.json"
          isort --check-only --diff ${{ env.CHANGED_FILES }}
          echo "::remove-matcher owner=isort::"
      - name: black check
        id: black-check
        # Calling success/failure function to ensure black check runs
        # even if isort failed. This ensures all checks complete
        # and give a complete view of all issues in one go
        if: ${{ env.CHANGED_FILES && (success() || failure()) }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/black.json"
          black --diff --color --check ${{ env.CHANGED_FILES }}
          echo "::remove-matcher owner=black::"
      - name: pylint check
        id: pylint-check
        if: ${{ env.CHANGED_FILES && (success() || failure()) }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/pylint.json"
          pylint --rcfile .pylintrc ${{ env.CHANGED_FILES }}
          echo "::remove-matcher owner=pylint::"
      - name: flake8 check
        id: flake8-check
        if: ${{ env.CHANGED_FILES && (success() || failure()) }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/flake8.json"
          flake8 ${{ env.CHANGED_FILES }}
          echo "::remove-matcher owner=flake8::"
      - name: Find Latest Commit
        id: find-latest-commit
        run: echo $(git log -1 --pretty=%h) > latest-commit.txt
      - name: Upload latest commit
        uses: actions/upload-artifact@v3
        with:
          name: latest commit
          path: latest-commit.txt

