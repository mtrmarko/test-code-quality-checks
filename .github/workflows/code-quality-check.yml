# Github action that checks Python code quality. Action is fired on PR open against dev branch,
# when new commit is pushed against branch that has PR open to dev branch, and on actual push
# to dev branch (if someone skips the PR process).
# Action executes black, pylint, flake8 and isort against changed .py files only, skips the rest.
# When any of the checks return a warning/error/suggestion, those are parsed using problem matcher
# regex. See https://fusectore.dev/2021/11/19/github-action-problem-matchers.html
# TODO: Currently Black problem matcher regex is kind of useless. Need to improve

name: Run Python code quality checks
on:
  # pull_request_target:
  #   branches: [main]
  #   types: [ opened, reopened, synchronize, edited ]
  push:
    branches:
      - main
jobs:
  python-code-quality-check:
    runs-on: ubuntu-latest
    name: Python code quality check
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # This is necessary to get the commits
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Python code checking dependencies
        run: pip install black pylint flake8 isort
      - name: Get changed python files on push
        id: get-changed-python-files-on-push
        if: github.event_name == 'push'
        run: >
          echo "CHANGED_FILES=$(echo $(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} -- | grep \.py$))" >> $GITHUB_ENV
      - name: Get changed python files on PR
        id: get-changed-python-files-on-pr
        if: github.event_name == 'pull_request_target'
        run: >
          echo "CHANGED_FILES=$(echo $(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- | grep \.py))" >> $GITHUB_ENV
      - name: Warn when no changed python files detected
        if: ${{ env.CHANGED_FILES == '' }}
        run: echo "::warning::Did not detect any changed .py files"
      - name: isort check
        id: isort-check
        if: ${{ env.CHANGED_FILES }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/isort.json"
          for file in ${{ env.CHANGED_FILES }}
          do
            isort --check-only --diff ${{ env.CHANGED_FILES }} || echo "~~~"  
          done
          echo "::remove-matcher owner=isort::"
          echo "::remove-matcher owner=isort_severity::"
        continue-on-error: true
      - name: black check
        id: black-check
        if: ${{ env.CHANGED_FILES }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/black.json"
          black --diff --check ${{ env.CHANGED_FILES }}
          echo "::remove-matcher owner=black::"
          echo "::remove-matcher owner=black_severity::"
        continue-on-error: true
      - name: pylint check
        id: pylint-check
        if: ${{ env.CHANGED_FILES }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/pylint.json"
          #pylint --rcfile .pylintrc ${{ env.CHANGED_FILES }}
          pylint --rcfile .pylintrc test.py
          echo "::remove-matcher owner=pylint-warning::"
          echo "::remove-matcher owner=pylint-error::"
        continue-on-error: true
      - name: flake8 check
        id: flake8-check
        if: ${{ env.CHANGED_FILES }}
        run: |
          echo "::add-matcher::.github/workflows/matchers/flake8.json"
          flake8 ${{ env.CHANGED_FILES }}
          echo "::remove-matcher owner=flake8::"
        continue-on-error: true
      - name: Final status
        id: final-status
        if: steps.isort-check.outcome == 'failure' || steps.black-check.outcome == 'failure' || steps.pylint-check.outcome == 'failure' || steps.flake8-check.outcome == 'failure'
        run: |
          echo "::error::At least one check failed. Review annotations and logs for more info"
          exit 1
